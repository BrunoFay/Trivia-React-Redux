{"ast":null,"code":"import { CLEAN_STATE, GET_ASSERTION, GET_SCORE, SAVE_LOGIN } from '../actions';\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: ''\n};\n\nconst player = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SAVE_LOGIN:\n      return { ...state,\n        name: action.name,\n        gravatarEmail: action.email\n      };\n\n    case GET_SCORE:\n      return { ...state,\n        score: action.score + state.score\n      };\n\n    case GET_ASSERTION:\n      return { ...state,\n        assertions: state.assertions + 1\n      };\n\n    case CLEAN_STATE:\n      return { ...state,\n        ...INITIAL_STATE\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default player;","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/redux/reducers/player.js"],"names":["CLEAN_STATE","GET_ASSERTION","GET_SCORE","SAVE_LOGIN","INITIAL_STATE","name","assertions","score","gravatarEmail","player","state","action","type","email"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,aAAtB,EAAqCC,SAArC,EAAgDC,UAAhD,QAAkE,YAAlE;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,UAAU,EAAE,CAFQ;AAGpBC,EAAAA,KAAK,EAAE,CAHa;AAIpBC,EAAAA,aAAa,EAAE;AAJK,CAAtB;;AAOA,MAAMC,MAAM,GAAG,YAAmC;AAAA,MAAlCC,KAAkC,uEAA1BN,aAA0B;AAAA,MAAXO,MAAW;;AAChD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKT,UAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELL,QAAAA,IAAI,EAAEM,MAAM,CAACN,IAFR;AAGLG,QAAAA,aAAa,EAAEG,MAAM,CAACE;AAHjB,OAAP;;AAKF,SAAKX,SAAL;AACE,aAAO,EACL,GAAGQ,KADE;AACKH,QAAAA,KAAK,EAAEI,MAAM,CAACJ,KAAP,GAAeG,KAAK,CAACH;AADjC,OAAP;;AAGF,SAAKN,aAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELJ,QAAAA,UAAU,EAAEI,KAAK,CAACJ,UAAN,GAAmB;AAF1B,OAAP;;AAIF,SAAKN,WAAL;AACE,aAAO,EACL,GAAGU,KADE;AAEL,WAAGN;AAFE,OAAP;;AAIF;AACE,aAAOM,KAAP;AAtBF;AAwBD,CAzBD;;AA2BA,eAAeD,MAAf","sourcesContent":["import { CLEAN_STATE, GET_ASSERTION, GET_SCORE, SAVE_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case SAVE_LOGIN:\n    return {\n      ...state,\n      name: action.name,\n      gravatarEmail: action.email,\n    };\n  case GET_SCORE:\n    return {\n      ...state, score: action.score + state.score,\n    };\n  case GET_ASSERTION:\n    return {\n      ...state,\n      assertions: state.assertions + 1,\n    };\n  case CLEAN_STATE:\n    return {\n      ...state,\n      ...INITIAL_STATE,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n"]},"metadata":{},"sourceType":"module"}