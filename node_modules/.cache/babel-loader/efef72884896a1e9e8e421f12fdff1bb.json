{"ast":null,"code":"import { getQuestionsApi, getTokenApi } from '../../api';\nimport { addLocalStorage } from '../../localStorage';\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const SAVE_LOGIN = 'SAVE_LOGIN';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\nexport const GET_SCORE = 'GET_SCORE';\nexport const NEXT_QUESTION = 'NEXT_QUESTION';\nexport const GET_ASSERTION = 'GET_ASSERTION';\nexport const ADD_HASH = 'ADD_HASH';\nexport const CLEAN_STATE = 'CLEAN_STATE';\nexport const cleanState = () => ({\n  type: CLEAN_STATE\n});\nexport const addHash = hash => ({\n  type: ADD_HASH,\n  hash\n});\nexport const getAssertion = () => ({\n  type: GET_ASSERTION\n});\nexport const nextQuestion = () => ({\n  type: NEXT_QUESTION\n});\nexport const getToken = token => ({\n  type: GET_TOKEN,\n  token\n});\nexport const getScore = score => ({\n  type: GET_SCORE,\n  score\n});\nexport const saveQuestions = questions => ({\n  type: SAVE_QUESTIONS,\n  questions\n});\nexport const addToken = () => async dispatch => {\n  let response = await getTokenApi();\n  let questions = await getQuestionsApi(response.token);\n\n  if (questions.response_code !== 0) {\n    response = await getTokenApi();\n    questions = await getQuestionsApi(response.token);\n  }\n\n  dispatch(getToken(response.token));\n  addLocalStorage('token', response.token);\n  dispatch(saveQuestions(questions));\n};\nexport const timer = count;\nexport const saveLogin = (name, email) => ({\n  type: SAVE_LOGIN,\n  name,\n  email\n});","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/redux/actions/index.js"],"names":["getQuestionsApi","getTokenApi","addLocalStorage","GET_TOKEN","SAVE_LOGIN","SAVE_QUESTIONS","GET_SCORE","NEXT_QUESTION","GET_ASSERTION","ADD_HASH","CLEAN_STATE","cleanState","type","addHash","hash","getAssertion","nextQuestion","getToken","token","getScore","score","saveQuestions","questions","addToken","dispatch","response","response_code","timer","count","saveLogin","name","email"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,WAA1B,QAA6C,WAA7C;AACA,SAASC,eAAT,QAAgC,oBAAhC;AAEA,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,SAAS,GAAG,WAAlB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,QAAQ,GAAG,UAAjB;AAEP,OAAO,MAAMC,WAAW,GAAG,aAApB;AAEP,OAAO,MAAMC,UAAU,GAAG,OAAO;AAC/BC,EAAAA,IAAI,EAAEF;AADyB,CAAP,CAAnB;AAIP,OAAO,MAAMG,OAAO,GAAIC,IAAD,KAAW;AAChCF,EAAAA,IAAI,EAAEH,QAD0B;AAEhCK,EAAAA;AAFgC,CAAX,CAAhB;AAKP,OAAO,MAAMC,YAAY,GAAG,OAAO;AACjCH,EAAAA,IAAI,EAAEJ;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMQ,YAAY,GAAG,OAAO;AACjCJ,EAAAA,IAAI,EAAEL;AAD2B,CAAP,CAArB;AAIP,OAAO,MAAMU,QAAQ,GAAIC,KAAD,KAAY;AAClCN,EAAAA,IAAI,EAAET,SAD4B;AAElCe,EAAAA;AAFkC,CAAZ,CAAjB;AAKP,OAAO,MAAMC,QAAQ,GAAIC,KAAD,KAAY;AAClCR,EAAAA,IAAI,EAAEN,SAD4B;AAElCc,EAAAA;AAFkC,CAAZ,CAAjB;AAKP,OAAO,MAAMC,aAAa,GAAIC,SAAD,KAAgB;AAC3CV,EAAAA,IAAI,EAAEP,cADqC;AAE3CiB,EAAAA;AAF2C,CAAhB,CAAtB;AAKP,OAAO,MAAMC,QAAQ,GAAG,MACtB,MAAOC,QAAP,IAAoB;AAClB,MAAIC,QAAQ,GAAG,MAAMxB,WAAW,EAAhC;AACA,MAAIqB,SAAS,GAAG,MAAMtB,eAAe,CAACyB,QAAQ,CAACP,KAAV,CAArC;;AAEA,MAAII,SAAS,CAACI,aAAV,KAA4B,CAAhC,EAAmC;AACjCD,IAAAA,QAAQ,GAAG,MAAMxB,WAAW,EAA5B;AACAqB,IAAAA,SAAS,GAAG,MAAMtB,eAAe,CAACyB,QAAQ,CAACP,KAAV,CAAjC;AACD;;AAEDM,EAAAA,QAAQ,CAACP,QAAQ,CAACQ,QAAQ,CAACP,KAAV,CAAT,CAAR;AACAhB,EAAAA,eAAe,CAAC,OAAD,EAAUuB,QAAQ,CAACP,KAAnB,CAAf;AACAM,EAAAA,QAAQ,CAACH,aAAa,CAACC,SAAD,CAAd,CAAR;AACD,CAbI;AAeP,OAAO,MAAMK,KAAK,GAAIC,KAAf;AAEP,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAAOC,KAAP,MAAkB;AACzCnB,EAAAA,IAAI,EAAER,UADmC;AAEzC0B,EAAAA,IAFyC;AAGzCC,EAAAA;AAHyC,CAAlB,CAAlB","sourcesContent":["import { getQuestionsApi, getTokenApi } from '../../api';\nimport { addLocalStorage } from '../../localStorage';\n\nexport const GET_TOKEN = 'GET_TOKEN';\nexport const SAVE_LOGIN = 'SAVE_LOGIN';\nexport const SAVE_QUESTIONS = 'SAVE_QUESTIONS';\nexport const GET_SCORE = 'GET_SCORE';\nexport const NEXT_QUESTION = 'NEXT_QUESTION';\nexport const GET_ASSERTION = 'GET_ASSERTION';\nexport const ADD_HASH = 'ADD_HASH';\n\nexport const CLEAN_STATE = 'CLEAN_STATE';\n\nexport const cleanState = () => ({\n  type: CLEAN_STATE,\n});\n\nexport const addHash = (hash) => ({\n  type: ADD_HASH,\n  hash,\n});\n\nexport const getAssertion = () => ({\n  type: GET_ASSERTION,\n});\n\nexport const nextQuestion = () => ({\n  type: NEXT_QUESTION,\n});\n\nexport const getToken = (token) => ({\n  type: GET_TOKEN,\n  token,\n});\n\nexport const getScore = (score) => ({\n  type: GET_SCORE,\n  score,\n});\n\nexport const saveQuestions = (questions) => ({\n  type: SAVE_QUESTIONS,\n  questions,\n});\n\nexport const addToken = () => (\n  async (dispatch) => {\n    let response = await getTokenApi();\n    let questions = await getQuestionsApi(response.token);\n\n    if (questions.response_code !== 0) {\n      response = await getTokenApi();\n      questions = await getQuestionsApi(response.token);\n    }\n\n    dispatch(getToken(response.token));\n    addLocalStorage('token', response.token);\n    dispatch(saveQuestions(questions));\n  }\n);\nexport const timer = (count)\n\nexport const saveLogin = (name, email) => ({\n  type: SAVE_LOGIN,\n  name,\n  email,\n});\n"]},"metadata":{},"sourceType":"module"}