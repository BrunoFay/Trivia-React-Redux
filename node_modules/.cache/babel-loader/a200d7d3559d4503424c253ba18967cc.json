{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/components/Question.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAssertion, getScore, nextQuestion } from '../redux/actions';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\nconst INITIAL_STATE = {\n  count: 30,\n  answers: [],\n  counterFinished: false,\n  wasAnswered: false\n};\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n    this.state = INITIAL_STATE;\n    this.counter = 0;\n    this.randomAnswer = this.randomAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.changeTime = this.changeTime.bind(this);\n    this.sortAnswers = this.sortAnswers.bind(this);\n    this.btnHandle = this.btnHandle.bind(this);\n    this.score = this.score.bind(this);\n    this.nextHandle = this.nextHandle.bind(this);\n  }\n\n  componentDidMount() {\n    this.sortAnswers();\n    this.timer();\n  }\n\n  sortAnswers() {\n    const {\n      result: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers\n      }\n    } = this.props;\n    const sortAnswers = [...incorrectAnswers, correctAnswer].sort(this.randomAnswer);\n    this.setState({\n      answers: sortAnswers\n    });\n  }\n\n  randomAnswer() {\n    const testNumber = 0.5;\n    return testNumber - Math.random();\n  } // ref: https://stackoverflow.com/questions/40885923/countdown-timer-in-react\n\n\n  changeTime() {\n    const {\n      count\n    } = this.state;\n\n    if (count > 0) {\n      this.setState(prevState => ({\n        count: prevState.count - 1\n      }));\n    } else if (count === 0) {\n      clearInterval(this.counter);\n      this.setState({\n        counterFinished: true,\n        wasAnswered: true\n      });\n    }\n  }\n\n  timer() {\n    const seconds = 1000;\n    this.counter = setInterval(this.changeTime, seconds);\n  }\n\n  styleBtn(nameId) {\n    const btns = document.querySelectorAll('.btn-game');\n    btns.forEach(btn => {\n      const testId = btn.getAttribute('data-testid');\n\n      if (testId === nameId) {\n        btn.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  btnHandle(event) {\n    const nameId = 'correct-answer';\n    this.styleBtn(nameId);\n    this.score(event, nameId);\n    this.setState({\n      wasAnswered: true\n    });\n  }\n\n  nextHandle() {\n    console.log(this.props);\n    const {\n      nextButtomAction,\n      index,\n      history\n    } = this.props;\n    const maxLength = 4;\n    nextButtomAction();\n    this.setState(INITIAL_STATE, () => {\n      this.sortAnswers();\n    });\n\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  score(_ref, nameId) {\n    let {\n      target\n    } = _ref;\n    const {\n      props: {\n        result: {\n          difficulty\n        },\n        getScoreAction,\n        assertionDispatch\n      },\n      state: {\n        count\n      }\n    } = this;\n    const testId = target.getAttribute('data-testid');\n\n    if (testId === nameId) {\n      const difficultyTypes = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const initialScore = 10;\n      const score = initialScore + count * difficultyTypes[difficulty];\n      getScoreAction(score);\n      assertionDispatch();\n      const prevLocalStorage = loadLocalStorage('score');\n      addLocalStorage('score', score + prevLocalStorage);\n    }\n  }\n\n  render() {\n    const {\n      result: {\n        category,\n        question,\n        incorrect_answers: incorrectAnswers\n      }\n    } = this.props;\n    const {\n      count,\n      answers,\n      counterFinished,\n      wasAnswered\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"section\", {\n      id: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }\n    }, category), /*#__PURE__*/React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, question), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }\n    }, count), /*#__PURE__*/React.createElement(\"div\", {\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, answers.map((answer, index) => /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn-game\",\n      key: answer,\n      disabled: counterFinished || wasAnswered,\n      onClick: this.btnHandle,\n      \"data-testid\": incorrectAnswers.includes(answer) ? `wrong-answer-${index}` : 'correct-answer',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }\n    }, answer))), wasAnswered && /*#__PURE__*/React.createElement(\"button\", {\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.nextHandle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, \"Next\"));\n  }\n\n}\n\nQuestion.propTypes = {\n  getScoreAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  nextButtomAction: PropTypes.func.isRequired,\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.string,\n    difficulty: PropTypes.string\n  }).isRequired,\n  assertionDispatch: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getScoreAction: score => dispatch(getScore(score)),\n  nextButtomAction: () => dispatch(nextQuestion()),\n  assertionDispatch: () => dispatch(getAssertion())\n});\n\nexport default connect(null, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/components/Question.js"],"names":["React","Component","PropTypes","connect","getAssertion","getScore","nextQuestion","addLocalStorage","loadLocalStorage","INITIAL_STATE","count","answers","counterFinished","wasAnswered","Question","constructor","props","state","counter","randomAnswer","bind","timer","changeTime","sortAnswers","btnHandle","score","nextHandle","componentDidMount","result","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","sort","setState","testNumber","Math","random","prevState","clearInterval","seconds","setInterval","styleBtn","nameId","btns","document","querySelectorAll","forEach","btn","testId","getAttribute","style","border","event","console","log","nextButtomAction","index","history","maxLength","push","target","difficulty","getScoreAction","assertionDispatch","difficultyTypes","hard","medium","easy","initialScore","prevLocalStorage","render","category","question","map","answer","includes","propTypes","func","isRequired","shape","number","string","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getAssertion, getScore, nextQuestion } from '../redux/actions';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\n\nconst INITIAL_STATE = {\n  count: 30,\n  answers: [],\n  counterFinished: false,\n  wasAnswered: false,\n};\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = INITIAL_STATE;\n\n    this.counter = 0;\n\n    this.randomAnswer = this.randomAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.changeTime = this.changeTime.bind(this);\n    this.sortAnswers = this.sortAnswers.bind(this);\n    this.btnHandle = this.btnHandle.bind(this);\n    this.score = this.score.bind(this);\n    this.nextHandle = this.nextHandle.bind(this);\n  }\n\n  componentDidMount() {\n    this.sortAnswers();\n    this.timer();\n  }\n\n  sortAnswers() {\n    const {\n      result: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n\n    const sortAnswers = [...incorrectAnswers, correctAnswer].sort(\n      this.randomAnswer,\n    );\n\n    this.setState({ answers: sortAnswers });\n  }\n\n  randomAnswer() {\n    const testNumber = 0.5;\n    return testNumber - Math.random();\n  }\n\n  // ref: https://stackoverflow.com/questions/40885923/countdown-timer-in-react\n  changeTime() {\n    const { count } = this.state;\n    if (count > 0) {\n      this.setState((prevState) => ({ count: prevState.count - 1 }));\n    } else if (count === 0) {\n      clearInterval(this.counter);\n      this.setState({ counterFinished: true, wasAnswered: true });\n    }\n  }\n\n  timer() {\n    const seconds = 1000;\n    this.counter = setInterval(this.changeTime, seconds);\n  }\n\n  styleBtn(nameId) {\n    const btns = document.querySelectorAll('.btn-game');\n\n    btns.forEach((btn) => {\n      const testId = btn.getAttribute('data-testid');\n\n      if (testId === nameId) {\n        btn.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  btnHandle(event) {\n    const nameId = 'correct-answer';\n    this.styleBtn(nameId);\n    this.score(event, nameId);\n    this.setState({ wasAnswered: true });\n  }\n\n  nextHandle() {\n    console.log(this.props);\n    const { nextButtomAction, index, history } = this.props;\n    const maxLength = 4;\n\n    nextButtomAction();\n    this.setState(INITIAL_STATE, () => {\n      this.sortAnswers();\n    });\n\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n  }\n\n  score({ target }, nameId) {\n    const {\n      props: {\n        result: { difficulty },\n        getScoreAction, assertionDispatch,\n      },\n      state: { count },\n    } = this;\n    const testId = target.getAttribute('data-testid');\n    if (testId === nameId) {\n      const difficultyTypes = { hard: 3, medium: 2, easy: 1 };\n      const initialScore = 10;\n      const score = initialScore + count * difficultyTypes[difficulty];\n      getScoreAction(score);\n      assertionDispatch();\n      const prevLocalStorage = loadLocalStorage('score');\n      addLocalStorage('score', score + prevLocalStorage);\n    }\n  }\n\n  render() {\n    const {\n      result: { category, question, incorrect_answers: incorrectAnswers },\n    } = this.props;\n\n    const { count, answers, counterFinished, wasAnswered } = this.state;\n    return (\n      <section id=''>\n        <p data-testid=\"question-category\">{category}</p>\n\n        <p data-testid=\"question-text\">{question}</p>\n\n        <p>{count}</p>\n\n        <div data-testid=\"answer-options\">\n          {answers.map((answer, index) => (\n            <button\n              type=\"button\"\n              className=\"btn-game\"\n              key={ answer }\n              disabled={ counterFinished || wasAnswered }\n              onClick={ this.btnHandle }\n              data-testid={\n                incorrectAnswers.includes(answer)\n                  ? `wrong-answer-${index}`\n                  : 'correct-answer'\n              }\n            >\n              {answer}\n            </button>\n          ))}\n        </div>\n        {wasAnswered && (\n          <button\n            data-testid=\"btn-next\"\n            type=\"button\"\n            onClick={ this.nextHandle }\n          >\n            Next\n          </button>)}\n      </section>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  getScoreAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  nextButtomAction: PropTypes.func.isRequired,\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.string,\n    difficulty: PropTypes.string,\n  }).isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getScoreAction: (score) => dispatch(getScore(score)),\n  nextButtomAction: () => dispatch(nextQuestion()),\n  assertionDispatch: () => dispatch(getAssertion()),\n});\n\nexport default connect(null, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}