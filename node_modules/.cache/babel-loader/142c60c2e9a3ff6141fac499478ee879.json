{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Login.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addToken, saveLogin } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      validate: true\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateInput = this.validateInput.bind(this);\n    this.handleConfig = this.handleConfig.bind(this);\n  }\n\n  handleChange(_ref) {\n    let {\n      target: {\n        name,\n        value\n      }\n    } = _ref;\n    this.setState({\n      [name]: value\n    }, () => {\n      this.validateInput();\n    });\n  }\n\n  handleConfig() {\n    const {\n      history\n    } = this.props;\n    history.push('/config');\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const {\n      history,\n      tokenDispatch,\n      loginDispatch\n    } = this.props;\n    const {\n      name,\n      email\n    } = this.state;\n    await tokenDispatch();\n    loginDispatch(name, email);\n    history.push('/trivia');\n  }\n\n  validateInput() {\n    const {\n      name,\n      email\n    } = this.state;\n    this.setState({\n      validate: !(name.length > 0 && email.length > 0)\n    });\n  }\n\n  render() {\n    const {\n      name,\n      email,\n      validate\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      className: \"login\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }, \"s\", /*#__PURE__*/React.createElement(\"form\", {\n      className: \"loginForm\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, \"Nome:\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"name\",\n      name: \"name\",\n      value: name,\n      type: \"text\",\n      \"data-testid\": \"input-player-name\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }\n    }, \"Email:\", /*#__PURE__*/React.createElement(\"input\", {\n      id: \"email\",\n      name: \"email\",\n      value: email,\n      type: \"email\",\n      \"data-testid\": \"input-gravatar-email\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      \"data-testid\": \"btn-play\",\n      disabled: validate,\n      onClick: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, \"Play\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-settings\",\n      onClick: this.handleConfig,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }\n    }, \"Configura\\xE7\\xE3o\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  tokenDispatch: () => dispatch(addToken()),\n  loginDispatch: (name, email) => dispatch(saveLogin(name, email))\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape([]),\n  tokenDipatch: PropTypes.func\n}.isRequired;\nexport default connect(null, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Login.jsx"],"names":["React","PropTypes","connect","addToken","saveLogin","Login","Component","constructor","props","state","name","email","validate","handleChange","bind","handleSubmit","validateInput","handleConfig","target","value","setState","history","push","event","preventDefault","tokenDispatch","loginDispatch","length","render","mapDispatchToProps","dispatch","propTypes","shape","tokenDipatch","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,kBAApC;;AAEA,MAAMC,KAAN,SAAoBL,KAAK,CAACM,SAA1B,CAAoC;AAClCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXC,MAAAA,KAAK,EAAE,EAFI;AAGXC,MAAAA,QAAQ,EAAE;AAHC,KAAb;AAKA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBD,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKE,aAAL,GAAqB,KAAKA,aAAL,CAAmBF,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKG,YAAL,GAAoB,KAAKA,YAAL,CAAkBH,IAAlB,CAAuB,IAAvB,CAApB;AACD;;AAEDD,EAAAA,YAAY,OAA8B;AAAA,QAA7B;AAAEK,MAAAA,MAAM,EAAE;AAAER,QAAAA,IAAF;AAAQS,QAAAA;AAAR;AAAV,KAA6B;AACxC,SAAKC,QAAL,CAAc;AAAE,OAACV,IAAD,GAAQS;AAAV,KAAd,EAAiC,MAAM;AACrC,WAAKH,aAAL;AACD,KAFD;AAGD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAM;AAAEI,MAAAA;AAAF,QAAc,KAAKb,KAAzB;AACAa,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACD;;AAEiB,QAAZP,YAAY,CAACQ,KAAD,EAAQ;AACxBA,IAAAA,KAAK,CAACC,cAAN;AACA,UAAM;AAAEH,MAAAA,OAAF;AAAWI,MAAAA,aAAX;AAA0BC,MAAAA;AAA1B,QAA4C,KAAKlB,KAAvD;AACA,UAAM;AAAEE,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkB,KAAKF,KAA7B;AACA,UAAMgB,aAAa,EAAnB;AACAC,IAAAA,aAAa,CAAChB,IAAD,EAAOC,KAAP,CAAb;AACAU,IAAAA,OAAO,CAACC,IAAR,CAAa,SAAb;AACD;;AAEDN,EAAAA,aAAa,GAAG;AACd,UAAM;AAAEN,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkB,KAAKF,KAA7B;AACA,SAAKW,QAAL,CAAc;AAAER,MAAAA,QAAQ,EAAE,EAAEF,IAAI,CAACiB,MAAL,GAAc,CAAd,IAAmBhB,KAAK,CAACgB,MAAN,GAAe,CAApC;AAAZ,KAAd;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElB,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA4B,KAAKH,KAAvC;AAEA,wBACE;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAEE;AAAM,MAAA,SAAS,EAAC,WAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAEE;AACE,MAAA,EAAE,EAAC,MADL;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAGC,IAHV;AAIE,MAAA,IAAI,EAAC,MAJP;AAKE,qBAAY,mBALd;AAME,MAAA,QAAQ,EAAG,KAAKG,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,eAYE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAEE;AACE,MAAA,EAAE,EAAC,OADL;AAEE,MAAA,IAAI,EAAC,OAFP;AAGE,MAAA,KAAK,EAAGF,KAHV;AAIE,MAAA,IAAI,EAAC,OAJP;AAKE,qBAAY,sBALd;AAME,MAAA,QAAQ,EAAG,KAAKE,YANlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAZF,eAuBE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAY,UAFd;AAGE,MAAA,QAAQ,EAAGD,QAHb;AAIE,MAAA,OAAO,EAAG,KAAKG,YAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,CAFF,eAmCE;AACE,MAAA,IAAI,EAAC,QADP;AAEE,qBAAY,cAFd;AAGE,MAAA,OAAO,EAAG,KAAKE,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAnCF,CADF;AA6CD;;AAvFiC;;AA0FpC,MAAMY,kBAAkB,GAAIC,QAAD,KAAe;AACxCL,EAAAA,aAAa,EAAE,MAAMK,QAAQ,CAAC3B,QAAQ,EAAT,CADW;AAExCuB,EAAAA,aAAa,EAAE,CAAChB,IAAD,EAAOC,KAAP,KAAiBmB,QAAQ,CAAC1B,SAAS,CAACM,IAAD,EAAOC,KAAP,CAAV;AAFA,CAAf,CAA3B;;AAKAN,KAAK,CAAC0B,SAAN,GAAkB;AAChBV,EAAAA,OAAO,EAAEpB,SAAS,CAAC+B,KAAV,CAAgB,EAAhB,CADO;AAEhBC,EAAAA,YAAY,EAAEhC,SAAS,CAACiC;AAFR,EAGhBC,UAHF;AAKA,eAAejC,OAAO,CAAC,IAAD,EAAO2B,kBAAP,CAAP,CAAkCxB,KAAlC,CAAf","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { addToken, saveLogin } from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      validate: true,\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.validateInput = this.validateInput.bind(this);\n    this.handleConfig = this.handleConfig.bind(this);\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value }, () => {\n      this.validateInput();\n    });\n  }\n\n  handleConfig() {\n    const { history } = this.props;\n    history.push('/config');\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n    const { history, tokenDispatch, loginDispatch } = this.props;\n    const { name, email } = this.state;\n    await tokenDispatch();\n    loginDispatch(name, email);\n    history.push('/trivia');\n  }\n\n  validateInput() {\n    const { name, email } = this.state;\n    this.setState({ validate: !(name.length > 0 && email.length > 0) });\n  }\n\n  render() {\n    const { name, email, validate } = this.state;\n\n    return (\n      <main className='login'>\n        s\n        <form className='loginForm'>\n          <label htmlFor=\"name\">\n            Nome:\n            <input\n              id=\"name\"\n              name=\"name\"\n              value={ name }\n              type=\"text\"\n              data-testid=\"input-player-name\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <label htmlFor=\"email\">\n            Email:\n            <input\n              id=\"email\"\n              name=\"email\"\n              value={ email }\n              type=\"email\"\n              data-testid=\"input-gravatar-email\"\n              onChange={ this.handleChange }\n            />\n          </label>\n          <button\n            type=\"submit\"\n            data-testid=\"btn-play\"\n            disabled={ validate }\n            onClick={ this.handleSubmit }\n          >\n            Play\n          </button>\n        </form>\n\n        <button\n          type=\"button\"\n          data-testid=\"btn-settings\"\n          onClick={ this.handleConfig }\n        >\n          Configuração\n        </button>\n      </main>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  tokenDispatch: () => dispatch(addToken()),\n  loginDispatch: (name, email) => dispatch(saveLogin(name, email)),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape([]),\n  tokenDipatch: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}