{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/components/Question.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AiOutlineDoubleRight } from 'react-icons/ai';\nimport { getAssertion, getScore, nextQuestion, timer } from '../redux/actions';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\nconst INITIAL_STATE = {\n  count: 30,\n  answers: [],\n  counterFinished: false,\n  wasAnswered: false\n};\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n\n    this.htmlDecode = input => {\n      var doc = new DOMParser().parseFromString(input, \"text/html\");\n      console.log(input, doc);\n      return [doc.documentElement.textContent];\n    };\n\n    this.state = INITIAL_STATE;\n    this.counter = 0;\n    this.randomAnswer = this.randomAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.changeTime = this.changeTime.bind(this);\n    this.sortAnswers = this.sortAnswers.bind(this);\n    this.btnHandle = this.btnHandle.bind(this);\n    this.score = this.score.bind(this);\n    this.nextHandle = this.nextHandle.bind(this);\n  }\n\n  componentDidMount() {\n    this.sortAnswers();\n    this.timer();\n  }\n\n  sortAnswers() {\n    const {\n      result: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers\n      }\n    } = this.props;\n    const sortAnswers = [...incorrectAnswers, correctAnswer].sort(this.randomAnswer);\n    this.setState({\n      answers: sortAnswers\n    });\n  }\n\n  randomAnswer() {\n    const testNumber = 0.5;\n    return testNumber - Math.random();\n  } // ref: https://stackoverflow.com/questions/40885923/countdown-timer-in-react\n\n\n  changeTime() {\n    const {\n      state: {\n        count\n      },\n      props: {\n        handleTimer\n      }\n    } = this;\n\n    if (count > 0) {\n      this.setState(prevState => ({\n        count: prevState.count - 1\n      }));\n      handleTimer(count);\n    } else if (count === 0) {\n      clearInterval(this.counter);\n      this.setState({\n        counterFinished: true,\n        wasAnswered: true\n      });\n      handleTimer(count);\n    }\n  }\n\n  timer() {\n    const seconds = 1000;\n    this.counter = setInterval(this.changeTime, seconds);\n  }\n\n  styleBtn(nameId) {\n    const btns = document.querySelectorAll('.btn-game');\n    btns.forEach(btn => {\n      const testId = btn.getAttribute('data-testid');\n\n      if (testId === nameId) {\n        btn.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  btnHandle(event) {\n    const nameId = 'correct-answer';\n    this.styleBtn(nameId);\n    this.score(event, nameId);\n    this.setState({\n      wasAnswered: true\n    });\n  }\n\n  nextHandle() {\n    const {\n      nextButtomAction,\n      index,\n      history\n    } = this.props;\n    const maxLength = 4;\n    nextButtomAction();\n    this.setState(INITIAL_STATE, this.sortAnswers);\n    this.timer();\n\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n\n    clearInterval(this.counter);\n  }\n\n  score(_ref, nameId) {\n    let {\n      target\n    } = _ref;\n    const {\n      props: {\n        result: {\n          difficulty\n        },\n        getScoreAction,\n        assertionDispatch\n      },\n      state: {\n        count\n      }\n    } = this;\n    const testId = target.getAttribute('data-testid');\n\n    if (testId === nameId) {\n      const difficultyTypes = {\n        hard: 3,\n        medium: 2,\n        easy: 1\n      };\n      const initialScore = 10;\n      const score = initialScore + count * difficultyTypes[difficulty];\n      getScoreAction(score);\n      assertionDispatch();\n      const prevLocalStorage = loadLocalStorage('score');\n      addLocalStorage('score', score + prevLocalStorage);\n    }\n  }\n\n  render() {\n    const {\n      result: {\n        category,\n        question,\n        incorrect_answers: incorrectAnswers\n      },\n      index: indexQuestions\n    } = this.props;\n    const {\n      answers,\n      counterFinished,\n      wasAnswered\n    } = this.state;\n    const test = this.htmlDecode(answers);\n    return /*#__PURE__*/React.createElement(\"main\", {\n      id: \"trivia-game\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"section\", {\n      id: \"questionSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"category\",\n      \"data-testid\": \"question-category\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }\n    }, category), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"question\",\n      \"data-testid\": \"question-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }\n    }, question), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"num-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, indexQuestions + 1, \"/5\")), /*#__PURE__*/React.createElement(\"section\", {\n      id: \"answers\",\n      \"data-testid\": \"answer-options\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 10\n      }\n    }, [test].map((answer, index) => /*#__PURE__*/React.createElement(\"button\", {\n      id: `Answer${index}`,\n      type: \"button\",\n      className: \"btn-game\",\n      key: answer,\n      disabled: counterFinished || wasAnswered,\n      onClick: this.btnHandle,\n      \"data-testid\": incorrectAnswers.includes(answer) ? `wrong-answer-${index}` : 'correct-answer',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }, answer))), wasAnswered && /*#__PURE__*/React.createElement(\"button\", {\n      id: \"btn-next\",\n      \"data-testid\": \"btn-next\",\n      type: \"button\",\n      onClick: this.nextHandle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 11\n      }\n    }, \"Next\", /*#__PURE__*/React.createElement(AiOutlineDoubleRight, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\n\nQuestion.propTypes = {\n  getScoreAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  nextButtomAction: PropTypes.func.isRequired,\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.shape([]),\n    difficulty: PropTypes.string\n  }).isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n  handleTimer: PropTypes.func.isRequired\n};\n\nconst mapDispatchToProps = dispatch => ({\n  getScoreAction: score => dispatch(getScore(score)),\n  nextButtomAction: () => dispatch(nextQuestion()),\n  assertionDispatch: () => dispatch(getAssertion()),\n  timerDispatch: count => dispatch(timer(count))\n});\n\nexport default connect(null, mapDispatchToProps)(Question);","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/components/Question.js"],"names":["React","Component","PropTypes","connect","AiOutlineDoubleRight","getAssertion","getScore","nextQuestion","timer","addLocalStorage","loadLocalStorage","INITIAL_STATE","count","answers","counterFinished","wasAnswered","Question","constructor","props","htmlDecode","input","doc","DOMParser","parseFromString","console","log","documentElement","textContent","state","counter","randomAnswer","bind","changeTime","sortAnswers","btnHandle","score","nextHandle","componentDidMount","result","correct_answer","correctAnswer","incorrect_answers","incorrectAnswers","sort","setState","testNumber","Math","random","handleTimer","prevState","clearInterval","seconds","setInterval","styleBtn","nameId","btns","document","querySelectorAll","forEach","btn","testId","getAttribute","style","border","event","nextButtomAction","index","history","maxLength","push","target","difficulty","getScoreAction","assertionDispatch","difficultyTypes","hard","medium","easy","initialScore","prevLocalStorage","render","category","question","indexQuestions","test","map","answer","includes","propTypes","func","isRequired","shape","number","string","mapDispatchToProps","dispatch","timerDispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { AiOutlineDoubleRight } from 'react-icons/ai';\nimport { getAssertion, getScore, nextQuestion, timer } from '../redux/actions';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\n\nconst INITIAL_STATE = {\n  count: 30,\n  answers: [],\n  counterFinished: false,\n  wasAnswered: false,\n};\n\nclass Question extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = INITIAL_STATE;\n\n    this.counter = 0;\n\n    this.randomAnswer = this.randomAnswer.bind(this);\n    this.timer = this.timer.bind(this);\n    this.changeTime = this.changeTime.bind(this);\n    this.sortAnswers = this.sortAnswers.bind(this);\n    this.btnHandle = this.btnHandle.bind(this);\n    this.score = this.score.bind(this);\n    this.nextHandle = this.nextHandle.bind(this);\n  }\n\n  componentDidMount() {\n    this.sortAnswers();\n    this.timer();\n  }\n\n  sortAnswers() {\n    const {\n      result: {\n        correct_answer: correctAnswer,\n        incorrect_answers: incorrectAnswers,\n      },\n    } = this.props;\n\n    const sortAnswers = [...incorrectAnswers, correctAnswer].sort(\n      this.randomAnswer,\n    );\n\n    this.setState({ answers: sortAnswers });\n  }\n\n  randomAnswer() {\n    const testNumber = 0.5;\n    return testNumber - Math.random();\n  }\n\n  // ref: https://stackoverflow.com/questions/40885923/countdown-timer-in-react\n  changeTime() {\n    const { state: { count }, props: { handleTimer } } = this;\n    if (count > 0) {\n      this.setState((prevState) => ({ count: prevState.count - 1 }));\n      handleTimer(count);\n    } else if (count === 0) {\n      clearInterval(this.counter);\n      this.setState({ counterFinished: true, wasAnswered: true });\n      handleTimer(count);\n    }\n  }\n\n  timer() {\n    const seconds = 1000;\n    this.counter = setInterval(this.changeTime, seconds);\n  }\n\n  styleBtn(nameId) {\n    const btns = document.querySelectorAll('.btn-game');\n\n    btns.forEach((btn) => {\n      const testId = btn.getAttribute('data-testid');\n\n      if (testId === nameId) {\n        btn.style.border = '3px solid rgb(6, 240, 15)';\n      } else {\n        btn.style.border = '3px solid rgb(255, 0, 0)';\n      }\n    });\n  }\n\n  btnHandle(event) {\n    const nameId = 'correct-answer';\n    this.styleBtn(nameId);\n    this.score(event, nameId);\n    this.setState({ wasAnswered: true });\n  }\n\n  nextHandle() {\n    const {\n      nextButtomAction,\n      index,\n      history,\n    } = this.props;\n    const maxLength = 4;\n    nextButtomAction();\n    this.setState(INITIAL_STATE, this.sortAnswers);\n    this.timer();\n    if (index === maxLength) {\n      history.push('/feedback');\n    }\n    clearInterval(this.counter);\n  }\n\n  score({ target }, nameId) {\n    const {\n      props: {\n        result: { difficulty },\n        getScoreAction, assertionDispatch,\n      },\n      state: { count },\n    } = this;\n    const testId = target.getAttribute('data-testid');\n    if (testId === nameId) {\n      const difficultyTypes = { hard: 3, medium: 2, easy: 1 };\n      const initialScore = 10;\n      const score = initialScore + count * difficultyTypes[difficulty];\n      getScoreAction(score);\n      assertionDispatch();\n      const prevLocalStorage = loadLocalStorage('score');\n      addLocalStorage('score', score + prevLocalStorage);\n    }\n  }\nhtmlDecode = (input) => {\n    var doc = new DOMParser().parseFromString(input, \"text/html\");\n    console.log(input,doc);\n    return [doc.documentElement.textContent];\n  }\n  render() {\n    const {\n      result: {\n        category,\n        question,\n        incorrect_answers: incorrectAnswers },\n      index: indexQuestions,\n    } = this.props;\n\n    const { answers, counterFinished, wasAnswered } = this.state;\n    const test= this.htmlDecode(answers)\n   \n    return (\n      <main id=\"trivia-game\">\n        <section id=\"questionSection\">\n          <span id=\"category\" data-testid=\"question-category\">{category}</span>\n\n          <span id=\"question\" data-testid=\"question-text\">{question}</span>\n          <span id=\"num-question\">\n            {indexQuestions + 1}\n            /5\n          </span>\n\n        </section>\n       { <section id=\"answers\" data-testid=\"answer-options\">\n\n          {[test].map((answer, index) => (\n            <button\n              id={ `Answer${index}` }\n              type=\"button\"\n              className=\"btn-game\"\n              key={ answer }\n              disabled={ counterFinished || wasAnswered }\n              onClick={ this.btnHandle }\n              data-testid={\n                incorrectAnswers.includes(answer)\n                  ? `wrong-answer-${index}`\n                  : 'correct-answer'\n              }\n            >\n              {answer}\n            </button>\n          ))}\n        </section>}\n        {wasAnswered && (\n          <button\n            id=\"btn-next\"\n            data-testid=\"btn-next\"\n            type=\"button\"\n            onClick={ this.nextHandle }\n          >\n            Next\n            <AiOutlineDoubleRight />\n          </button>)}\n      </main>\n    );\n  }\n}\n\nQuestion.propTypes = {\n  getScoreAction: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n  nextButtomAction: PropTypes.func.isRequired,\n  result: PropTypes.shape({\n    category: PropTypes.string,\n    question: PropTypes.string,\n    correct_answer: PropTypes.string,\n    incorrect_answers: PropTypes.shape([]),\n    difficulty: PropTypes.string,\n  }).isRequired,\n  assertionDispatch: PropTypes.func.isRequired,\n  handleTimer: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  getScoreAction: (score) => dispatch(getScore(score)),\n  nextButtomAction: () => dispatch(nextQuestion()),\n  assertionDispatch: () => dispatch(getAssertion()),\n  timerDispatch: (count) => dispatch(timer(count)),\n});\n\nexport default connect(null, mapDispatchToProps)(Question);\n"]},"metadata":{},"sourceType":"module"}