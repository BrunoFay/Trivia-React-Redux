{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Feedback.jsx\";\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\nimport { cleanState } from '../redux/actions';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n    this.btnHandler = this.btnHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      name,\n      score,\n      hash\n    } = this.props;\n    const rankingObj = {\n      name,\n      score,\n      picture: `https://www.gravatar.com/avatar/${hash}`\n    };\n    let rankingStorage = loadLocalStorage('ranking');\n\n    if (rankingStorage === null) {\n      addLocalStorage('ranking', []);\n      rankingStorage = loadLocalStorage('ranking');\n    }\n\n    const newRanking = rankingStorage.concat(rankingObj);\n    addLocalStorage('ranking', newRanking);\n  }\n\n  btnHandler() {\n    const {\n      history,\n      resetState\n    } = this.props;\n    resetState();\n    history.push('/');\n  }\n\n  render() {\n    const {\n      assertions,\n      score,\n      history\n    } = this.props;\n    const minAssertion = 3;\n    return /*#__PURE__*/React.createElement(\"main\", {\n      id: \"feedback\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 8\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      id: \"feedback-message\",\n      \"data-testid\": \"feedback-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, assertions < minAssertion ? 'Could be better...' : 'Well Done!'), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"feedback-score\",\n      \"data-testid\": \"feedback-total-score\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, score), /*#__PURE__*/React.createElement(\"span\", {\n      id: \"feedback-assertions\",\n      \"data-testid\": \"feedback-total-question\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, assertions)), /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-play-again\",\n      onClick: this.btnHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, \"Play Again\"), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"btn-ranking\",\n      onClick: () => history.push('/ranking'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, \"Ranking\")));\n  }\n\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.func.isRequired,\n  hash: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  resetState: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  hash: state.hash,\n  name: state.player.name\n});\n\nconst mapDispatchToProps = dispatch => ({\n  resetState: () => dispatch(cleanState())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Feedback.jsx"],"names":["PropTypes","React","Component","connect","Header","addLocalStorage","loadLocalStorage","cleanState","Feedback","constructor","props","btnHandler","bind","componentDidMount","name","score","hash","rankingObj","picture","rankingStorage","newRanking","concat","history","resetState","push","render","assertions","minAssertion","propTypes","number","isRequired","func","string","mapStateToProps","state","player","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport { addLocalStorage, loadLocalStorage } from '../localStorage';\nimport { cleanState } from '../redux/actions';\n\nclass Feedback extends Component {\n  constructor(props) {\n    super(props);\n\n    this.btnHandler = this.btnHandler.bind(this);\n  }\n\n  componentDidMount() {\n    const { name, score, hash } = this.props;\n    const rankingObj = {\n      name,\n      score,\n      picture: `https://www.gravatar.com/avatar/${hash}`,\n    };\n\n    let rankingStorage = loadLocalStorage('ranking');\n\n    if (rankingStorage === null) {\n      addLocalStorage('ranking', []);\n      rankingStorage = loadLocalStorage('ranking');\n    }\n\n    const newRanking = rankingStorage.concat(rankingObj);\n    addLocalStorage('ranking', newRanking);\n  }\n\n  btnHandler() {\n    const { history, resetState } = this.props;\n    resetState();\n    history.push('/');\n  }\n\n  render() {\n    const { assertions, score, history } = this.props;\n    const minAssertion = 3;\n    return (\n      <main id='feedback'>\n        <Header />\n       <section>\n          <span\n            id='feedback-message'\n            data-testid=\"feedback-text\">\n            {assertions < minAssertion ? 'Could be better...' : 'Well Done!'}\n          </span>\n          <span\n            id='feedback-score'\n            data-testid=\"feedback-total-score\">{score}</span>\n          <span\n            id='feedback-assertions'\n            data-testid=\"feedback-total-question\">{assertions}</span>\n       </section>\n        <section>\n          <button\n            type=\"button\"\n            data-testid=\"btn-play-again\"\n            onClick={this.btnHandler}\n          >\n            Play Again\n          </button>\n\n          <button\n            type=\"button\"\n            data-testid=\"btn-ranking\"\n            onClick={() => history.push('/ranking')}\n          >\n            Ranking\n          </button>\n        </section>\n      </main>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.func.isRequired,\n  hash: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  resetState: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  hash: state.hash,\n  name: state.player.name,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetState: () => dispatch(cleanState()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Feedback);\n"]},"metadata":{},"sourceType":"module"}