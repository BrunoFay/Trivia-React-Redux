{"ast":null,"code":"var _jsxFileName = \"/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Trivia.jsx\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport { addLocalStorage } from '../localStorage';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.callback = () => {\n      const {\n        results\n      } = this.props;\n      this.setState({\n        questions: results\n      });\n    };\n\n    this.handleTimer = tim => {\n      this.setState({\n        timer: tim\n      });\n    };\n\n    this.htmlDecode = input => {\n      var doc = new DOMParser().parseFromString(input, \"text/html\");\n      return doc.documentElement.textContent;\n    };\n\n    this.state = {\n      questions: []\n    };\n    this.callback = this.callback.bind(this);\n  }\n\n  componentDidMount() {\n    this.callback();\n    addLocalStorage('score', 0);\n  }\n\n  render() {\n    const {\n      state: {\n        questions,\n        timer\n      },\n      props: {\n        index,\n        history\n      }\n    } = this;\n    console.log(this.htmlDecode( /*#__PURE__*/React.createElement(Question, {\n      handleTimer: this.handleTimer,\n      result: questions[index],\n      index: index,\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 30\n      }\n    })));\n    return /*#__PURE__*/React.createElement(\"main\", {\n      id: \"trivia\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(Header, {\n      timer: timer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }\n    }), questions.length > 0 && /*#__PURE__*/React.createElement(Question, {\n      handleTimer: this.handleTimer,\n      result: questions[index],\n      index: index,\n      history: history,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 12\n      }\n    }));\n  }\n\n}\n\nTrivia.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  index: PropTypes.number.isRequired\n};\n\nconst mapStateToProps = state => ({\n  results: state.questions.resultApi.results,\n  index: state.questions.index\n});\n\nexport default connect(mapStateToProps)(Trivia);","map":{"version":3,"sources":["/home/bruno/Documentos/MeusProjetos/Projetos-Trybe/front-end/sd-016-b-project-trivia-react-redux/src/pages/Trivia.jsx"],"names":["PropTypes","React","connect","Header","Question","addLocalStorage","Trivia","Component","constructor","props","callback","results","setState","questions","handleTimer","tim","timer","htmlDecode","input","doc","DOMParser","parseFromString","documentElement","textContent","state","bind","componentDidMount","render","index","history","console","log","length","propTypes","arrayOf","object","isRequired","number","mapStateToProps","resultApi"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport { addLocalStorage } from '../localStorage';\n\nclass Trivia extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      questions: [],\n    };\n\n    this.callback = this.callback.bind(this);\n  }\n\n  componentDidMount() {\n    this.callback();\n    addLocalStorage('score', 0);\n  }\n\n  callback = () => {\n    const { results } = this.props;\n    this.setState({ questions: results });\n  }\n\nhandleTimer =(tim) => {\n  this.setState({\n    timer: tim,\n  });\n}\n htmlDecode =(input)=> {\n  var doc = new DOMParser().parseFromString(input, \"text/html\");\n  return doc.documentElement.textContent;\n}\n\nrender() {\n  const { state: { questions, timer }, props: { index, history } } = this;\nconsole.log(this.htmlDecode( <Question\n  handleTimer={ this.handleTimer }\n  result={ questions[index] }\n  index={ index }\n  history={ history }\n/>) );\n  return (\n    <main id=\"trivia\">\n      <Header timer={ timer } />\n      { questions.length > 0\n        && <Question\n          handleTimer={ this.handleTimer }\n          result={ questions[index] }\n          index={ index }\n          history={ history }\n        /> }\n    </main>\n  );\n}\n}\n\nTrivia.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  results: state.questions.resultApi.results,\n  index: state.questions.index,\n});\n\nexport default connect(mapStateToProps)(Trivia);\n"]},"metadata":{},"sourceType":"module"}